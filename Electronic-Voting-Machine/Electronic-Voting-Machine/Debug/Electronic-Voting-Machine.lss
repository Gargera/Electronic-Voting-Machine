
Electronic-Voting-Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000cb8  00000d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000014a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000117e  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ab  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083e  00000000  00000000  00002b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011f4  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00004b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  8a:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_vInit>:
#include "DIO.h"

void BUTTON_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
}
  98:	08 95       	ret

0000009a <BUTTON_u8read>:

unsigned char BUTTON_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x=DIO_u8read(portname,pinnumber);
  9a:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_u8read>
	return x;
}
  9e:	08 95       	ret

000000a0 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  a0:	82 34       	cpi	r24, 0x42	; 66
  a2:	51 f1       	breq	.+84     	; 0xf8 <DIO_vsetPINDir+0x58>
  a4:	83 34       	cpi	r24, 0x43	; 67
  a6:	20 f4       	brcc	.+8      	; 0xb0 <DIO_vsetPINDir+0x10>
  a8:	81 34       	cpi	r24, 0x41	; 65
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0xe>
  ac:	7b c0       	rjmp	.+246    	; 0x1a4 <DIO_vsetPINDir+0x104>
  ae:	07 c0       	rjmp	.+14     	; 0xbe <DIO_vsetPINDir+0x1e>
  b0:	83 34       	cpi	r24, 0x43	; 67
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_vsetPINDir+0x16>
  b4:	3e c0       	rjmp	.+124    	; 0x132 <DIO_vsetPINDir+0x92>
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDir+0x1c>
  ba:	74 c0       	rjmp	.+232    	; 0x1a4 <DIO_vsetPINDir+0x104>
  bc:	57 c0       	rjmp	.+174    	; 0x16c <DIO_vsetPINDir+0xcc>
	{
		case 'A':
		if(direction==1)
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	69 f4       	brne	.+26     	; 0xdc <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	ac 01       	movw	r20, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x30>
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x2c>
  d4:	ba 01       	movw	r22, r20
  d6:	62 2b       	or	r22, r18
  d8:	6a bb       	out	0x1a, r22	; 26
  da:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	ac 01       	movw	r20, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_vsetPINDir+0x4a>
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_vsetPINDir+0x46>
  ee:	ba 01       	movw	r22, r20
  f0:	60 95       	com	r22
  f2:	62 23       	and	r22, r18
  f4:	6a bb       	out	0x1a, r22	; 26
  f6:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	69 f4       	brne	.+26     	; 0x116 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_vsetPINDir+0x6a>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_vsetPINDir+0x66>
 10e:	ba 01       	movw	r22, r20
 110:	62 2b       	or	r22, r18
 112:	67 bb       	out	0x17, r22	; 23
 114:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ac 01       	movw	r20, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPINDir+0x84>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPINDir+0x80>
 128:	ba 01       	movw	r22, r20
 12a:	60 95       	com	r22
 12c:	62 23       	and	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23
 130:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	69 f4       	brne	.+26     	; 0x150 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac 01       	movw	r20, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vsetPINDir+0xa4>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vsetPINDir+0xa0>
 148:	ba 01       	movw	r22, r20
 14a:	62 2b       	or	r22, r18
 14c:	64 bb       	out	0x14, r22	; 20
 14e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_vsetPINDir+0xbe>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_vsetPINDir+0xba>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	64 bb       	out	0x14, r22	; 20
 16a:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	69 f4       	brne	.+26     	; 0x18a <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_vsetPINDir+0xde>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_vsetPINDir+0xda>
 182:	ba 01       	movw	r22, r20
 184:	62 2b       	or	r22, r18
 186:	61 bb       	out	0x11, r22	; 17
 188:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPINDir+0xf8>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPINDir+0xf4>
 19c:	ba 01       	movw	r22, r20
 19e:	60 95       	com	r22
 1a0:	62 23       	and	r22, r18
 1a2:	61 bb       	out	0x11, r22	; 17
 1a4:	08 95       	ret

000001a6 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1a6:	82 34       	cpi	r24, 0x42	; 66
 1a8:	51 f1       	breq	.+84     	; 0x1fe <DIO_write+0x58>
 1aa:	83 34       	cpi	r24, 0x43	; 67
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <DIO_write+0x10>
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0xe>
 1b2:	7b c0       	rjmp	.+246    	; 0x2aa <DIO_write+0x104>
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <DIO_write+0x1e>
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_write+0x16>
 1ba:	3e c0       	rjmp	.+124    	; 0x238 <DIO_write+0x92>
 1bc:	84 34       	cpi	r24, 0x44	; 68
 1be:	09 f0       	breq	.+2      	; 0x1c2 <DIO_write+0x1c>
 1c0:	74 c0       	rjmp	.+232    	; 0x2aa <DIO_write+0x104>
 1c2:	57 c0       	rjmp	.+174    	; 0x272 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ac 01       	movw	r20, r24
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write+0x30>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write+0x2c>
 1da:	ba 01       	movw	r22, r20
 1dc:	62 2b       	or	r22, r18
 1de:	6b bb       	out	0x1b, r22	; 27
 1e0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x4a>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x46>
 1f4:	ba 01       	movw	r22, r20
 1f6:	60 95       	com	r22
 1f8:	62 23       	and	r22, r18
 1fa:	6b bb       	out	0x1b, r22	; 27
 1fc:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	69 f4       	brne	.+26     	; 0x21c <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 202:	28 b3       	in	r18, 0x18	; 24
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	ac 01       	movw	r20, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_write+0x6a>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_write+0x66>
 214:	ba 01       	movw	r22, r20
 216:	62 2b       	or	r22, r18
 218:	68 bb       	out	0x18, r22	; 24
 21a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 21c:	28 b3       	in	r18, 0x18	; 24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	ac 01       	movw	r20, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write+0x84>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write+0x80>
 22e:	ba 01       	movw	r22, r20
 230:	60 95       	com	r22
 232:	62 23       	and	r22, r18
 234:	68 bb       	out	0x18, r22	; 24
 236:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	69 f4       	brne	.+26     	; 0x256 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	ac 01       	movw	r20, r24
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_write+0xa4>
 246:	44 0f       	add	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_write+0xa0>
 24e:	ba 01       	movw	r22, r20
 250:	62 2b       	or	r22, r18
 252:	65 bb       	out	0x15, r22	; 21
 254:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	ac 01       	movw	r20, r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_write+0xbe>
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_write+0xba>
 268:	ba 01       	movw	r22, r20
 26a:	60 95       	com	r22
 26c:	62 23       	and	r22, r18
 26e:	65 bb       	out	0x15, r22	; 21
 270:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 272:	41 30       	cpi	r20, 0x01	; 1
 274:	69 f4       	brne	.+26     	; 0x290 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0xde>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0xda>
 288:	ba 01       	movw	r22, r20
 28a:	62 2b       	or	r22, r18
 28c:	62 bb       	out	0x12, r22	; 18
 28e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write+0xf8>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write+0xf4>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	62 bb       	out	0x12, r22	; 18
 2aa:	08 95       	ret

000002ac <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 2ac:	82 34       	cpi	r24, 0x42	; 66
 2ae:	a1 f0       	breq	.+40     	; 0x2d8 <DIO_u8read+0x2c>
 2b0:	83 34       	cpi	r24, 0x43	; 67
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <DIO_u8read+0xe>
 2b4:	81 34       	cpi	r24, 0x41	; 65
 2b6:	71 f5       	brne	.+92     	; 0x314 <DIO_u8read+0x68>
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <DIO_u8read+0x18>
 2ba:	83 34       	cpi	r24, 0x43	; 67
 2bc:	b9 f0       	breq	.+46     	; 0x2ec <DIO_u8read+0x40>
 2be:	84 34       	cpi	r24, 0x44	; 68
 2c0:	49 f5       	brne	.+82     	; 0x314 <DIO_u8read+0x68>
 2c2:	1e c0       	rjmp	.+60     	; 0x300 <DIO_u8read+0x54>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 2c4:	29 b3       	in	r18, 0x19	; 25
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	c9 01       	movw	r24, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_u8read+0x24>
 2cc:	95 95       	asr	r25
 2ce:	87 95       	ror	r24
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_u8read+0x20>
 2d4:	81 70       	andi	r24, 0x01	; 1
		break;
 2d6:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 2d8:	26 b3       	in	r18, 0x16	; 22
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	c9 01       	movw	r24, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8read+0x38>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8read+0x34>
 2e8:	81 70       	andi	r24, 0x01	; 1
		break;
 2ea:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 2ec:	23 b3       	in	r18, 0x13	; 19
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	c9 01       	movw	r24, r18
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_u8read+0x4c>
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_u8read+0x48>
 2fc:	81 70       	andi	r24, 0x01	; 1
		break;
 2fe:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 300:	20 b3       	in	r18, 0x10	; 16
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	c9 01       	movw	r24, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_u8read+0x60>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_u8read+0x5c>
 310:	81 70       	andi	r24, 0x01	; 1
		break;
 312:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 314:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 316:	08 95       	ret

00000318 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 318:	82 34       	cpi	r24, 0x42	; 66
 31a:	b9 f0       	breq	.+46     	; 0x34a <DIO_toggle+0x32>
 31c:	83 34       	cpi	r24, 0x43	; 67
 31e:	18 f4       	brcc	.+6      	; 0x326 <DIO_toggle+0xe>
 320:	81 34       	cpi	r24, 0x41	; 65
 322:	c9 f5       	brne	.+114    	; 0x396 <DIO_toggle+0x7e>
 324:	05 c0       	rjmp	.+10     	; 0x330 <DIO_toggle+0x18>
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	e9 f0       	breq	.+58     	; 0x364 <DIO_toggle+0x4c>
 32a:	84 34       	cpi	r24, 0x44	; 68
 32c:	a1 f5       	brne	.+104    	; 0x396 <DIO_toggle+0x7e>
 32e:	27 c0       	rjmp	.+78     	; 0x37e <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 330:	2b b3       	in	r18, 0x1b	; 27
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_toggle+0x26>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_toggle+0x22>
 342:	ba 01       	movw	r22, r20
 344:	62 27       	eor	r22, r18
 346:	6b bb       	out	0x1b, r22	; 27
		break;
 348:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 34a:	28 b3       	in	r18, 0x18	; 24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_toggle+0x40>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_toggle+0x3c>
 35c:	ba 01       	movw	r22, r20
 35e:	62 27       	eor	r22, r18
 360:	68 bb       	out	0x18, r22	; 24
		break;
 362:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 364:	25 b3       	in	r18, 0x15	; 21
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ac 01       	movw	r20, r24
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_toggle+0x5a>
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_toggle+0x56>
 376:	ba 01       	movw	r22, r20
 378:	62 27       	eor	r22, r18
 37a:	65 bb       	out	0x15, r22	; 21
		break;
 37c:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 37e:	22 b3       	in	r18, 0x12	; 18
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	ac 01       	movw	r20, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_toggle+0x74>
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_toggle+0x70>
 390:	ba 01       	movw	r22, r20
 392:	62 27       	eor	r22, r18
 394:	62 bb       	out	0x12, r22	; 18
 396:	08 95       	ret

00000398 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 398:	82 34       	cpi	r24, 0x42	; 66
 39a:	61 f0       	breq	.+24     	; 0x3b4 <DIO_set_port_direction+0x1c>
 39c:	83 34       	cpi	r24, 0x43	; 67
 39e:	18 f4       	brcc	.+6      	; 0x3a6 <DIO_set_port_direction+0xe>
 3a0:	81 34       	cpi	r24, 0x41	; 65
 3a2:	69 f4       	brne	.+26     	; 0x3be <DIO_set_port_direction+0x26>
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <DIO_set_port_direction+0x18>
 3a6:	83 34       	cpi	r24, 0x43	; 67
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <DIO_set_port_direction+0x20>
 3aa:	84 34       	cpi	r24, 0x44	; 68
 3ac:	41 f4       	brne	.+16     	; 0x3be <DIO_set_port_direction+0x26>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 3b0:	6a bb       	out	0x1a, r22	; 26
		break ;
 3b2:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 3b4:	67 bb       	out	0x17, r22	; 23
		break ;
 3b6:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 3b8:	64 bb       	out	0x14, r22	; 20
		break ;
 3ba:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 3bc:	61 bb       	out	0x11, r22	; 17
 3be:	08 95       	ret

000003c0 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 3c0:	82 34       	cpi	r24, 0x42	; 66
 3c2:	61 f0       	breq	.+24     	; 0x3dc <DIO_write_port+0x1c>
 3c4:	83 34       	cpi	r24, 0x43	; 67
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <DIO_write_port+0xe>
 3c8:	81 34       	cpi	r24, 0x41	; 65
 3ca:	69 f4       	brne	.+26     	; 0x3e6 <DIO_write_port+0x26>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <DIO_write_port+0x18>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <DIO_write_port+0x20>
 3d2:	84 34       	cpi	r24, 0x44	; 68
 3d4:	41 f4       	brne	.+16     	; 0x3e6 <DIO_write_port+0x26>
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 3d8:	6b bb       	out	0x1b, r22	; 27
		break ;
 3da:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 3dc:	68 bb       	out	0x18, r22	; 24
		break ;
 3de:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 3e0:	65 bb       	out	0x15, r22	; 21
		break ;
 3e2:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 3e4:	62 bb       	out	0x12, r22	; 18
 3e6:	08 95       	ret

000003e8 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 3e8:	82 34       	cpi	r24, 0x42	; 66
 3ea:	61 f0       	breq	.+24     	; 0x404 <DIO_read_port+0x1c>
 3ec:	83 34       	cpi	r24, 0x43	; 67
 3ee:	18 f4       	brcc	.+6      	; 0x3f6 <DIO_read_port+0xe>
 3f0:	81 34       	cpi	r24, 0x41	; 65
 3f2:	71 f4       	brne	.+28     	; 0x410 <DIO_read_port+0x28>
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <DIO_read_port+0x18>
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	39 f0       	breq	.+14     	; 0x408 <DIO_read_port+0x20>
 3fa:	84 34       	cpi	r24, 0x44	; 68
 3fc:	49 f4       	brne	.+18     	; 0x410 <DIO_read_port+0x28>
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 400:	89 b3       	in	r24, 0x19	; 25
		break ;
 402:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 404:	86 b3       	in	r24, 0x16	; 22
		break ;
 406:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 408:	83 b3       	in	r24, 0x13	; 19
		break ;
 40a:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 40c:	80 b3       	in	r24, 0x10	; 16
		break ;
 40e:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 410:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 412:	08 95       	ret

00000414 <DIO_write_nibble>:

void DIO_write_nibble(unsigned char portname,unsigned char value,unsigned char pinnumber){
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	08 2f       	mov	r16, r24
 41e:	d6 2f       	mov	r29, r22
 420:	c4 2f       	mov	r28, r20
 422:	14 2f       	mov	r17, r20
 424:	1c 5f       	subi	r17, 0xFC	; 252
	int bits = 4; 
	while(bits--){
		DIO_write(portname , pinnumber , value%2);
 426:	4d 2f       	mov	r20, r29
 428:	41 70       	andi	r20, 0x01	; 1
 42a:	80 2f       	mov	r24, r16
 42c:	6c 2f       	mov	r22, r28
 42e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		value /= 2;
 432:	d6 95       	lsr	r29
		pinnumber++;
 434:	cf 5f       	subi	r28, 0xFF	; 255
	return return_val;
}

void DIO_write_nibble(unsigned char portname,unsigned char value,unsigned char pinnumber){
	int bits = 4; 
	while(bits--){
 436:	c1 17       	cp	r28, r17
 438:	b1 f7       	brne	.-20     	; 0x426 <DIO_write_nibble+0x12>
		DIO_write(portname , pinnumber , value%2);
		value /= 2;
		pinnumber++;
	}
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 444:	82 34       	cpi	r24, 0x42	; 66
 446:	51 f1       	breq	.+84     	; 0x49c <DIO_vconnectpullup+0x58>
 448:	83 34       	cpi	r24, 0x43	; 67
 44a:	20 f4       	brcc	.+8      	; 0x454 <DIO_vconnectpullup+0x10>
 44c:	81 34       	cpi	r24, 0x41	; 65
 44e:	09 f0       	breq	.+2      	; 0x452 <DIO_vconnectpullup+0xe>
 450:	7b c0       	rjmp	.+246    	; 0x548 <DIO_vconnectpullup+0x104>
 452:	07 c0       	rjmp	.+14     	; 0x462 <DIO_vconnectpullup+0x1e>
 454:	83 34       	cpi	r24, 0x43	; 67
 456:	09 f4       	brne	.+2      	; 0x45a <DIO_vconnectpullup+0x16>
 458:	3e c0       	rjmp	.+124    	; 0x4d6 <DIO_vconnectpullup+0x92>
 45a:	84 34       	cpi	r24, 0x44	; 68
 45c:	09 f0       	breq	.+2      	; 0x460 <DIO_vconnectpullup+0x1c>
 45e:	74 c0       	rjmp	.+232    	; 0x548 <DIO_vconnectpullup+0x104>
 460:	57 c0       	rjmp	.+174    	; 0x510 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	69 f4       	brne	.+26     	; 0x480 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	ac 01       	movw	r20, r24
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_vconnectpullup+0x30>
 470:	44 0f       	add	r20, r20
 472:	55 1f       	adc	r21, r21
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_vconnectpullup+0x2c>
 478:	ba 01       	movw	r22, r20
 47a:	62 2b       	or	r22, r18
 47c:	6b bb       	out	0x1b, r22	; 27
 47e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	ac 01       	movw	r20, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_vconnectpullup+0x4a>
 48a:	44 0f       	add	r20, r20
 48c:	55 1f       	adc	r21, r21
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_vconnectpullup+0x46>
 492:	ba 01       	movw	r22, r20
 494:	60 95       	com	r22
 496:	62 23       	and	r22, r18
 498:	6b bb       	out	0x1b, r22	; 27
 49a:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 4a0:	28 b3       	in	r18, 0x18	; 24
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	ac 01       	movw	r20, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_vconnectpullup+0x6a>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_vconnectpullup+0x66>
 4b2:	ba 01       	movw	r22, r20
 4b4:	62 2b       	or	r22, r18
 4b6:	68 bb       	out	0x18, r22	; 24
 4b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 4ba:	28 b3       	in	r18, 0x18	; 24
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	ac 01       	movw	r20, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_vconnectpullup+0x84>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_vconnectpullup+0x80>
 4cc:	ba 01       	movw	r22, r20
 4ce:	60 95       	com	r22
 4d0:	62 23       	and	r22, r18
 4d2:	68 bb       	out	0x18, r22	; 24
 4d4:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	69 f4       	brne	.+26     	; 0x4f4 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 4da:	25 b3       	in	r18, 0x15	; 21
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	ac 01       	movw	r20, r24
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_vconnectpullup+0xa4>
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_vconnectpullup+0xa0>
 4ec:	ba 01       	movw	r22, r20
 4ee:	62 2b       	or	r22, r18
 4f0:	65 bb       	out	0x15, r22	; 21
 4f2:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 4f4:	25 b3       	in	r18, 0x15	; 21
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	ac 01       	movw	r20, r24
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_vconnectpullup+0xbe>
 4fe:	44 0f       	add	r20, r20
 500:	55 1f       	adc	r21, r21
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_vconnectpullup+0xba>
 506:	ba 01       	movw	r22, r20
 508:	60 95       	com	r22
 50a:	62 23       	and	r22, r18
 50c:	65 bb       	out	0x15, r22	; 21
 50e:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 510:	41 30       	cpi	r20, 0x01	; 1
 512:	69 f4       	brne	.+26     	; 0x52e <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 514:	22 b3       	in	r18, 0x12	; 18
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	ac 01       	movw	r20, r24
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_vconnectpullup+0xde>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_vconnectpullup+0xda>
 526:	ba 01       	movw	r22, r20
 528:	62 2b       	or	r22, r18
 52a:	62 bb       	out	0x12, r22	; 18
 52c:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 52e:	22 b3       	in	r18, 0x12	; 18
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	ac 01       	movw	r20, r24
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_vconnectpullup+0xf8>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_vconnectpullup+0xf4>
 540:	ba 01       	movw	r22, r20
 542:	60 95       	com	r22
 544:	62 23       	and	r22, r18
 546:	62 bb       	out	0x12, r22	; 18
 548:	08 95       	ret

0000054a <main>:

#define  F_CPU   8000000UL
#define  MAX     100000

int main(void)
{
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	60 97       	sbiw	r28, 0x10	; 16
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
	
	LCD_init('C' , 4 , 'C' , 2 , 'C' , 1 , 'C' , 3 , 4);
 55e:	83 e4       	ldi	r24, 0x43	; 67
 560:	64 e0       	ldi	r22, 0x04	; 4
 562:	43 e4       	ldi	r20, 0x43	; 67
 564:	22 e0       	ldi	r18, 0x02	; 2
 566:	03 e4       	ldi	r16, 0x43	; 67
 568:	ee 24       	eor	r14, r14
 56a:	e3 94       	inc	r14
 56c:	0f 2e       	mov	r0, r31
 56e:	f3 e4       	ldi	r31, 0x43	; 67
 570:	cf 2e       	mov	r12, r31
 572:	f0 2d       	mov	r31, r0
 574:	0f 2e       	mov	r0, r31
 576:	f3 e0       	ldi	r31, 0x03	; 3
 578:	af 2e       	mov	r10, r31
 57a:	f0 2d       	mov	r31, r0
 57c:	88 24       	eor	r8, r8
 57e:	68 94       	set
 580:	82 f8       	bld	r8, 2
 582:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_init>
	for(char i = 0 ; i < 4 ; i++) BUTTON_vInit('D' , i);
 586:	10 e0       	ldi	r17, 0x00	; 0
 588:	84 e4       	ldi	r24, 0x44	; 68
 58a:	61 2f       	mov	r22, r17
 58c:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_vInit>
 590:	1f 5f       	subi	r17, 0xFF	; 255
 592:	14 30       	cpi	r17, 0x04	; 4
 594:	c9 f7       	brne	.-14     	; 0x588 <main+0x3e>
	
	LCD_vSend_string('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , "A=    0");
 596:	83 e4       	ldi	r24, 0x43	; 67
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	43 e4       	ldi	r20, 0x43	; 67
 59c:	21 e0       	ldi	r18, 0x01	; 1
 59e:	03 e4       	ldi	r16, 0x43	; 67
 5a0:	0f 2e       	mov	r0, r31
 5a2:	f3 e0       	ldi	r31, 0x03	; 3
 5a4:	ef 2e       	mov	r14, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	cc 24       	eor	r12, r12
 5aa:	68 94       	set
 5ac:	c2 f8       	bld	r12, 2
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f0 e6       	ldi	r31, 0x60	; 96
 5b2:	af 2e       	mov	r10, r31
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	bf 2e       	mov	r11, r31
 5b8:	f0 2d       	mov	r31, r0
 5ba:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vSend_string>
	LCD_movecursor(1 , 10 , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	6a e0       	ldi	r22, 0x0A	; 10
 5c2:	43 e4       	ldi	r20, 0x43	; 67
 5c4:	24 e0       	ldi	r18, 0x04	; 4
 5c6:	ee 24       	eor	r14, r14
 5c8:	e3 94       	inc	r14
 5ca:	0f 2e       	mov	r0, r31
 5cc:	f3 e4       	ldi	r31, 0x43	; 67
 5ce:	cf 2e       	mov	r12, r31
 5d0:	f0 2d       	mov	r31, r0
 5d2:	0f 2e       	mov	r0, r31
 5d4:	f3 e0       	ldi	r31, 0x03	; 3
 5d6:	af 2e       	mov	r10, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	88 24       	eor	r8, r8
 5dc:	68 94       	set
 5de:	82 f8       	bld	r8, 2
 5e0:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_movecursor>
	LCD_vSend_string('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , "B=    0");
 5e4:	83 e4       	ldi	r24, 0x43	; 67
 5e6:	64 e0       	ldi	r22, 0x04	; 4
 5e8:	43 e4       	ldi	r20, 0x43	; 67
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f3 e0       	ldi	r31, 0x03	; 3
 5f0:	ef 2e       	mov	r14, r31
 5f2:	f0 2d       	mov	r31, r0
 5f4:	cc 24       	eor	r12, r12
 5f6:	68 94       	set
 5f8:	c2 f8       	bld	r12, 2
 5fa:	0f 2e       	mov	r0, r31
 5fc:	f8 e6       	ldi	r31, 0x68	; 104
 5fe:	af 2e       	mov	r10, r31
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	bf 2e       	mov	r11, r31
 604:	f0 2d       	mov	r31, r0
 606:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vSend_string>
	LCD_movecursor(2 , 1 , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	43 e4       	ldi	r20, 0x43	; 67
 610:	24 e0       	ldi	r18, 0x04	; 4
 612:	ee 24       	eor	r14, r14
 614:	e3 94       	inc	r14
 616:	0f 2e       	mov	r0, r31
 618:	f3 e4       	ldi	r31, 0x43	; 67
 61a:	cf 2e       	mov	r12, r31
 61c:	f0 2d       	mov	r31, r0
 61e:	0f 2e       	mov	r0, r31
 620:	f3 e0       	ldi	r31, 0x03	; 3
 622:	af 2e       	mov	r10, r31
 624:	f0 2d       	mov	r31, r0
 626:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_movecursor>
	LCD_vSend_string('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , "C=    0");
 62a:	83 e4       	ldi	r24, 0x43	; 67
 62c:	64 e0       	ldi	r22, 0x04	; 4
 62e:	43 e4       	ldi	r20, 0x43	; 67
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	0f 2e       	mov	r0, r31
 634:	f3 e0       	ldi	r31, 0x03	; 3
 636:	ef 2e       	mov	r14, r31
 638:	f0 2d       	mov	r31, r0
 63a:	cc 24       	eor	r12, r12
 63c:	68 94       	set
 63e:	c2 f8       	bld	r12, 2
 640:	0f 2e       	mov	r0, r31
 642:	f0 e7       	ldi	r31, 0x70	; 112
 644:	af 2e       	mov	r10, r31
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	bf 2e       	mov	r11, r31
 64a:	f0 2d       	mov	r31, r0
 64c:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vSend_string>
	LCD_movecursor(2 , 10 , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	6a e0       	ldi	r22, 0x0A	; 10
 654:	43 e4       	ldi	r20, 0x43	; 67
 656:	24 e0       	ldi	r18, 0x04	; 4
 658:	ee 24       	eor	r14, r14
 65a:	e3 94       	inc	r14
 65c:	0f 2e       	mov	r0, r31
 65e:	f3 e4       	ldi	r31, 0x43	; 67
 660:	cf 2e       	mov	r12, r31
 662:	f0 2d       	mov	r31, r0
 664:	0f 2e       	mov	r0, r31
 666:	f3 e0       	ldi	r31, 0x03	; 3
 668:	af 2e       	mov	r10, r31
 66a:	f0 2d       	mov	r31, r0
 66c:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_movecursor>
	LCD_vSend_string('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , "D=    0");
 670:	83 e4       	ldi	r24, 0x43	; 67
 672:	64 e0       	ldi	r22, 0x04	; 4
 674:	43 e4       	ldi	r20, 0x43	; 67
 676:	21 e0       	ldi	r18, 0x01	; 1
 678:	0f 2e       	mov	r0, r31
 67a:	f3 e0       	ldi	r31, 0x03	; 3
 67c:	ef 2e       	mov	r14, r31
 67e:	f0 2d       	mov	r31, r0
 680:	cc 24       	eor	r12, r12
 682:	68 94       	set
 684:	c2 f8       	bld	r12, 2
 686:	0f 2e       	mov	r0, r31
 688:	f8 e7       	ldi	r31, 0x78	; 120
 68a:	af 2e       	mov	r10, r31
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	bf 2e       	mov	r11, r31
 690:	f0 2d       	mov	r31, r0
 692:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_vSend_string>
	
	LCD_vSend_cmd('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , 0x04);
 696:	83 e4       	ldi	r24, 0x43	; 67
 698:	64 e0       	ldi	r22, 0x04	; 4
 69a:	43 e4       	ldi	r20, 0x43	; 67
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	aa 24       	eor	r10, r10
 6a0:	68 94       	set
 6a2:	a2 f8       	bld	r10, 2
 6a4:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
	
	int  data[] = {0, 0, 0, 0};
 6a8:	fe 01       	movw	r30, r28
 6aa:	31 96       	adiw	r30, 0x01	; 1
 6ac:	88 e0       	ldi	r24, 0x08	; 8
 6ae:	df 01       	movw	r26, r30
 6b0:	1d 92       	st	X+, r1
 6b2:	8a 95       	dec	r24
 6b4:	e9 f7       	brne	.-6      	; 0x6b0 <main+0x166>
	char row[] = {1, 1, 2, 2} , col[] = {7, 16, 7, 16}; 
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	89 87       	std	Y+9, r24	; 0x09
 6ba:	8a 87       	std	Y+10, r24	; 0x0a
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	8b 87       	std	Y+11, r24	; 0x0b
 6c0:	8c 87       	std	Y+12, r24	; 0x0c
 6c2:	97 e0       	ldi	r25, 0x07	; 7
 6c4:	9d 87       	std	Y+13, r25	; 0x0d
 6c6:	80 e1       	ldi	r24, 0x10	; 16
 6c8:	8e 87       	std	Y+14, r24	; 0x0e
 6ca:	9f 87       	std	Y+15, r25	; 0x0f
 6cc:	88 8b       	std	Y+16, r24	; 0x10
	
    while(1)
    {
	   signed char idx = -1;
	   for(char i = 0 ; i < 4 ; i++){
 6ce:	10 e0       	ldi	r17, 0x00	; 0
	   }
	   
	   if(idx != -1){
	      char digits = 5;
		  int vData = data[idx];
		  LCD_movecursor(row[idx] , col[idx] , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
 6d0:	0f 2e       	mov	r0, r31
 6d2:	f5 e0       	ldi	r31, 0x05	; 5
 6d4:	df 2e       	mov	r13, r31
 6d6:	f0 2d       	mov	r31, r0
		  
		  while(digits--){
			  if(vData == 0)
		          LCD_vSend_char('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , ' ');
			  else
			      LCD_vSend_char('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , vData%10 + '0');
 6d8:	0f 2e       	mov	r0, r31
 6da:	fa e0       	ldi	r31, 0x0A	; 10
 6dc:	4f 2e       	mov	r4, r31
 6de:	55 24       	eor	r5, r5
 6e0:	f0 2d       	mov	r31, r0
	char row[] = {1, 1, 2, 2} , col[] = {7, 16, 7, 16}; 
	
    while(1)
    {
	   signed char idx = -1;
	   for(char i = 0 ; i < 4 ; i++){
 6e2:	ff 24       	eor	r15, r15
 6e4:	2f c0       	rjmp	.+94     	; 0x744 <main+0x1fa>
		   if(BUTTON_u8read('D' , i) != 0){
 6e6:	84 e4       	ldi	r24, 0x44	; 68
 6e8:	61 2f       	mov	r22, r17
 6ea:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8read>
 6ee:	88 23       	and	r24, r24
 6f0:	31 f1       	breq	.+76     	; 0x73e <main+0x1f4>
			  data[i] = (data[i] + 1)%MAX;
 6f2:	61 2e       	mov	r6, r17
 6f4:	77 24       	eor	r7, r7
 6f6:	66 0c       	add	r6, r6
 6f8:	77 1c       	adc	r7, r7
 6fa:	e1 e0       	ldi	r30, 0x01	; 1
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	ec 0f       	add	r30, r28
 700:	fd 1f       	adc	r31, r29
 702:	6e 0e       	add	r6, r30
 704:	7f 1e       	adc	r7, r31
 706:	d3 01       	movw	r26, r6
 708:	6d 91       	ld	r22, X+
 70a:	7c 91       	ld	r23, X
 70c:	6f 5f       	subi	r22, 0xFF	; 255
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	88 27       	eor	r24, r24
 712:	77 fd       	sbrc	r23, 7
 714:	80 95       	com	r24
 716:	98 2f       	mov	r25, r24
 718:	20 ea       	ldi	r18, 0xA0	; 160
 71a:	36 e8       	ldi	r19, 0x86	; 134
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	0e 94 09 06 	call	0xc12	; 0xc12 <__divmodsi4>
 724:	dc 01       	movw	r26, r24
 726:	cb 01       	movw	r24, r22
 728:	f3 01       	movw	r30, r6
 72a:	91 83       	std	Z+1, r25	; 0x01
 72c:	80 83       	st	Z, r24
		      idx = i;
 72e:	01 2f       	mov	r16, r17
			  while(BUTTON_u8read('D' , i) != 0);
 730:	84 e4       	ldi	r24, 0x44	; 68
 732:	61 2f       	mov	r22, r17
 734:	0e 94 4d 00 	call	0x9a	; 0x9a <BUTTON_u8read>
 738:	88 23       	and	r24, r24
 73a:	d1 f7       	brne	.-12     	; 0x730 <main+0x1e6>
 73c:	07 c0       	rjmp	.+14     	; 0x74c <main+0x202>
	char row[] = {1, 1, 2, 2} , col[] = {7, 16, 7, 16}; 
	
    while(1)
    {
	   signed char idx = -1;
	   for(char i = 0 ; i < 4 ; i++){
 73e:	1f 5f       	subi	r17, 0xFF	; 255
 740:	01 c0       	rjmp	.+2      	; 0x744 <main+0x1fa>
 742:	1f 2d       	mov	r17, r15
 744:	14 30       	cpi	r17, 0x04	; 4
 746:	78 f2       	brcs	.-98     	; 0x6e6 <main+0x19c>
 748:	1f 2d       	mov	r17, r15
 74a:	fc cf       	rjmp	.-8      	; 0x744 <main+0x1fa>
			  while(BUTTON_u8read('D' , i) != 0);
			  break;
		   }
	   }
	   
	   if(idx != -1){
 74c:	0f 3f       	cpi	r16, 0xFF	; 255
 74e:	c9 f3       	breq	.-14     	; 0x742 <main+0x1f8>
	      char digits = 5;
		  int vData = data[idx];
 750:	e0 2f       	mov	r30, r16
 752:	ff 27       	eor	r31, r31
 754:	e7 fd       	sbrc	r30, 7
 756:	f0 95       	com	r31
 758:	df 01       	movw	r26, r30
 75a:	aa 0f       	add	r26, r26
 75c:	bb 1f       	adc	r27, r27
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	8c 0f       	add	r24, r28
 764:	9d 1f       	adc	r25, r29
 766:	a8 0f       	add	r26, r24
 768:	b9 1f       	adc	r27, r25
 76a:	6d 90       	ld	r6, X+
 76c:	7c 90       	ld	r7, X
		  LCD_movecursor(row[idx] , col[idx] , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
 76e:	a9 e0       	ldi	r26, 0x09	; 9
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	ac 0f       	add	r26, r28
 774:	bd 1f       	adc	r27, r29
 776:	ae 0f       	add	r26, r30
 778:	bf 1f       	adc	r27, r31
 77a:	8d e0       	ldi	r24, 0x0D	; 13
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	8c 0f       	add	r24, r28
 780:	9d 1f       	adc	r25, r29
 782:	e8 0f       	add	r30, r24
 784:	f9 1f       	adc	r31, r25
 786:	8c 91       	ld	r24, X
 788:	60 81       	ld	r22, Z
 78a:	43 e4       	ldi	r20, 0x43	; 67
 78c:	24 e0       	ldi	r18, 0x04	; 4
 78e:	03 e4       	ldi	r16, 0x43	; 67
 790:	ee 24       	eor	r14, r14
 792:	e3 94       	inc	r14
 794:	0f 2e       	mov	r0, r31
 796:	f3 e4       	ldi	r31, 0x43	; 67
 798:	cf 2e       	mov	r12, r31
 79a:	f0 2d       	mov	r31, r0
 79c:	0f 2e       	mov	r0, r31
 79e:	f3 e0       	ldi	r31, 0x03	; 3
 7a0:	af 2e       	mov	r10, r31
 7a2:	f0 2d       	mov	r31, r0
 7a4:	88 24       	eor	r8, r8
 7a6:	68 94       	set
 7a8:	82 f8       	bld	r8, 2
 7aa:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_movecursor>
 7ae:	1d 2d       	mov	r17, r13
		  
		  while(digits--){
			  if(vData == 0)
 7b0:	61 14       	cp	r6, r1
 7b2:	71 04       	cpc	r7, r1
 7b4:	91 f4       	brne	.+36     	; 0x7da <main+0x290>
		          LCD_vSend_char('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , ' ');
 7b6:	83 e4       	ldi	r24, 0x43	; 67
 7b8:	64 e0       	ldi	r22, 0x04	; 4
 7ba:	43 e4       	ldi	r20, 0x43	; 67
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	03 e4       	ldi	r16, 0x43	; 67
 7c0:	0f 2e       	mov	r0, r31
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	ef 2e       	mov	r14, r31
 7c6:	f0 2d       	mov	r31, r0
 7c8:	cc 24       	eor	r12, r12
 7ca:	68 94       	set
 7cc:	c2 f8       	bld	r12, 2
 7ce:	aa 24       	eor	r10, r10
 7d0:	68 94       	set
 7d2:	a5 f8       	bld	r10, 5
 7d4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_vSend_char>
 7d8:	17 c0       	rjmp	.+46     	; 0x808 <main+0x2be>
			  else
			      LCD_vSend_char('C' , 4 , 'C' , 1 , 'C' , 3 , 4 , vData%10 + '0');
 7da:	c3 01       	movw	r24, r6
 7dc:	b2 01       	movw	r22, r4
 7de:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodhi4>
 7e2:	0f 2e       	mov	r0, r31
 7e4:	f0 e3       	ldi	r31, 0x30	; 48
 7e6:	af 2e       	mov	r10, r31
 7e8:	f0 2d       	mov	r31, r0
 7ea:	a8 0e       	add	r10, r24
 7ec:	83 e4       	ldi	r24, 0x43	; 67
 7ee:	64 e0       	ldi	r22, 0x04	; 4
 7f0:	43 e4       	ldi	r20, 0x43	; 67
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	03 e4       	ldi	r16, 0x43	; 67
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f3 e0       	ldi	r31, 0x03	; 3
 7fa:	ef 2e       	mov	r14, r31
 7fc:	f0 2d       	mov	r31, r0
 7fe:	cc 24       	eor	r12, r12
 800:	68 94       	set
 802:	c2 f8       	bld	r12, 2
 804:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_vSend_char>
			  vData /= 10;
 808:	c3 01       	movw	r24, r6
 80a:	b2 01       	movw	r22, r4
 80c:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodhi4>
 810:	3b 01       	movw	r6, r22
 812:	11 50       	subi	r17, 0x01	; 1
	   if(idx != -1){
	      char digits = 5;
		  int vData = data[idx];
		  LCD_movecursor(row[idx] , col[idx] , 'C' , 4 , 'C' , 1 , 'C' , 3 , 4);
		  
		  while(digits--){
 814:	69 f6       	brne	.-102    	; 0x7b0 <main+0x266>
	char row[] = {1, 1, 2, 2} , col[] = {7, 16, 7, 16}; 
	
    while(1)
    {
	   signed char idx = -1;
	   for(char i = 0 ; i < 4 ; i++){
 816:	1f 2d       	mov	r17, r15
 818:	95 cf       	rjmp	.-214    	; 0x744 <main+0x1fa>

0000081a <LCD_Enable>:
	LCD_clearscreen(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE);
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , ENTRY_MODE);
}

static void LCD_Enable(unsigned char portname , unsigned char pinnumber)
{
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	d8 2f       	mov	r29, r24
 820:	c6 2f       	mov	r28, r22
	DIO_write(portname,pinnumber,1);
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 828:	8f e9       	ldi	r24, 0x9F	; 159
 82a:	9f e0       	ldi	r25, 0x0F	; 15
 82c:	01 97       	sbiw	r24, 0x01	; 1
 82e:	f1 f7       	brne	.-4      	; 0x82c <LCD_Enable+0x12>
 830:	00 c0       	rjmp	.+0      	; 0x832 <LCD_Enable+0x18>
 832:	00 00       	nop
	_delay_ms(2);
	DIO_write(portname,pinnumber,0);
 834:	8d 2f       	mov	r24, r29
 836:	6c 2f       	mov	r22, r28
 838:	40 e0       	ldi	r20, 0x00	; 0
 83a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
 83e:	8f e9       	ldi	r24, 0x9F	; 159
 840:	9f e0       	ldi	r25, 0x0F	; 15
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <LCD_Enable+0x28>
 846:	00 c0       	rjmp	.+0      	; 0x848 <LCD_Enable+0x2e>
 848:	00 00       	nop
	_delay_ms(2);
}
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	08 95       	ret

00000850 <LCD_vSend_cmd>:

void LCD_vSend_cmd(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE , char cmd)
{
 850:	af 92       	push	r10
 852:	cf 92       	push	r12
 854:	ef 92       	push	r14
 856:	ff 92       	push	r15
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	c8 2f       	mov	r28, r24
 862:	d6 2f       	mov	r29, r22
 864:	14 2f       	mov	r17, r20
 866:	f2 2e       	mov	r15, r18
	if(BITS_MODE == 8){
 868:	88 e0       	ldi	r24, 0x08	; 8
 86a:	c8 16       	cp	r12, r24
 86c:	71 f4       	brne	.+28     	; 0x88a <__stack+0x2b>
		DIO_write_port(portname , cmd);
 86e:	8c 2f       	mov	r24, r28
 870:	6a 2d       	mov	r22, r10
 872:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_write_port>
		DIO_write(portname_RS , pinnumber_RS , 0);
 876:	81 2f       	mov	r24, r17
 878:	6f 2d       	mov	r22, r15
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 880:	80 2f       	mov	r24, r16
 882:	6e 2d       	mov	r22, r14
 884:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
 888:	1e c0       	rjmp	.+60     	; 0x8c6 <__stack+0x67>
	}
	else{
		DIO_write_nibble(portname , cmd>>4 , pinnumber);
 88a:	6a 2d       	mov	r22, r10
 88c:	62 95       	swap	r22
 88e:	6f 70       	andi	r22, 0x0F	; 15
 890:	8c 2f       	mov	r24, r28
 892:	4d 2f       	mov	r20, r29
 894:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write_nibble>
		DIO_write(portname_RS , pinnumber_RS , 0);
 898:	81 2f       	mov	r24, r17
 89a:	6f 2d       	mov	r22, r15
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 8a2:	80 2f       	mov	r24, r16
 8a4:	6e 2d       	mov	r22, r14
 8a6:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
		
		DIO_write_nibble(portname , cmd , pinnumber);
 8aa:	8c 2f       	mov	r24, r28
 8ac:	6a 2d       	mov	r22, r10
 8ae:	4d 2f       	mov	r20, r29
 8b0:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write_nibble>
		DIO_write(portname_RS , pinnumber_RS , 0);
 8b4:	81 2f       	mov	r24, r17
 8b6:	6f 2d       	mov	r22, r15
 8b8:	40 e0       	ldi	r20, 0x00	; 0
 8ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 8be:	80 2f       	mov	r24, r16
 8c0:	6e 2d       	mov	r22, r14
 8c2:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
 8c6:	8f ec       	ldi	r24, 0xCF	; 207
 8c8:	97 e0       	ldi	r25, 0x07	; 7
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <__stack+0x6b>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__stack+0x71>
 8d0:	00 00       	nop
	}
	_delay_ms(1);
}
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	ff 90       	pop	r15
 8dc:	ef 90       	pop	r14
 8de:	cf 90       	pop	r12
 8e0:	af 90       	pop	r10
 8e2:	08 95       	ret

000008e4 <LCD_vSend_char>:

void LCD_vSend_char(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE , char data)
{
 8e4:	af 92       	push	r10
 8e6:	cf 92       	push	r12
 8e8:	ef 92       	push	r14
 8ea:	ff 92       	push	r15
 8ec:	0f 93       	push	r16
 8ee:	1f 93       	push	r17
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	c8 2f       	mov	r28, r24
 8f6:	d6 2f       	mov	r29, r22
 8f8:	14 2f       	mov	r17, r20
 8fa:	f2 2e       	mov	r15, r18
	if(BITS_MODE == 8){
 8fc:	88 e0       	ldi	r24, 0x08	; 8
 8fe:	c8 16       	cp	r12, r24
 900:	71 f4       	brne	.+28     	; 0x91e <LCD_vSend_char+0x3a>
		DIO_write_port(portname , data);
 902:	8c 2f       	mov	r24, r28
 904:	6a 2d       	mov	r22, r10
 906:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <DIO_write_port>
		DIO_write(portname_RS , pinnumber_RS , 1);
 90a:	81 2f       	mov	r24, r17
 90c:	6f 2d       	mov	r22, r15
 90e:	41 e0       	ldi	r20, 0x01	; 1
 910:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 914:	80 2f       	mov	r24, r16
 916:	6e 2d       	mov	r22, r14
 918:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
 91c:	1e c0       	rjmp	.+60     	; 0x95a <LCD_vSend_char+0x76>
	}
	else{
		DIO_write_nibble(portname , data>>4 , pinnumber);
 91e:	6a 2d       	mov	r22, r10
 920:	62 95       	swap	r22
 922:	6f 70       	andi	r22, 0x0F	; 15
 924:	8c 2f       	mov	r24, r28
 926:	4d 2f       	mov	r20, r29
 928:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write_nibble>
		DIO_write(portname_RS , pinnumber_RS , 1);
 92c:	81 2f       	mov	r24, r17
 92e:	6f 2d       	mov	r22, r15
 930:	41 e0       	ldi	r20, 0x01	; 1
 932:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 936:	80 2f       	mov	r24, r16
 938:	6e 2d       	mov	r22, r14
 93a:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
		
		DIO_write_nibble(portname , data , pinnumber);
 93e:	8c 2f       	mov	r24, r28
 940:	6a 2d       	mov	r22, r10
 942:	4d 2f       	mov	r20, r29
 944:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write_nibble>
		DIO_write(portname_RS , pinnumber_RS , 1);
 948:	81 2f       	mov	r24, r17
 94a:	6f 2d       	mov	r22, r15
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
		LCD_Enable(portname_EN , pinnumber_EN);
 952:	80 2f       	mov	r24, r16
 954:	6e 2d       	mov	r22, r14
 956:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_Enable>
 95a:	8f ec       	ldi	r24, 0xCF	; 207
 95c:	97 e0       	ldi	r25, 0x07	; 7
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	f1 f7       	brne	.-4      	; 0x95e <LCD_vSend_char+0x7a>
 962:	00 c0       	rjmp	.+0      	; 0x964 <LCD_vSend_char+0x80>
 964:	00 00       	nop
	}
	_delay_ms(1);
}
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	ff 90       	pop	r15
 970:	ef 90       	pop	r14
 972:	cf 90       	pop	r12
 974:	af 90       	pop	r10
 976:	08 95       	ret

00000978 <LCD_vSend_string>:

void LCD_vSend_string(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE , char *data)
{
 978:	6f 92       	push	r6
 97a:	7f 92       	push	r7
 97c:	8f 92       	push	r8
 97e:	9f 92       	push	r9
 980:	af 92       	push	r10
 982:	bf 92       	push	r11
 984:	cf 92       	push	r12
 986:	df 92       	push	r13
 988:	ef 92       	push	r14
 98a:	ff 92       	push	r15
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	68 2e       	mov	r6, r24
 996:	76 2e       	mov	r7, r22
 998:	84 2e       	mov	r8, r20
 99a:	92 2e       	mov	r9, r18
 99c:	d0 2e       	mov	r13, r16
 99e:	fe 2c       	mov	r15, r14
 9a0:	1c 2d       	mov	r17, r12
 9a2:	e5 01       	movw	r28, r10
	while((*data) != '\0')
 9a4:	a8 80       	ld	r10, Y
 9a6:	aa 20       	and	r10, r10
 9a8:	69 f0       	breq	.+26     	; 0x9c4 <LCD_vSend_string+0x4c>
		LCD_Enable(portname_EN , pinnumber_EN);
	}
	_delay_ms(1);
}

void LCD_vSend_string(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE , char *data)
 9aa:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data) != '\0')
	{
		LCD_vSend_char(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , *data);
 9ac:	86 2d       	mov	r24, r6
 9ae:	67 2d       	mov	r22, r7
 9b0:	48 2d       	mov	r20, r8
 9b2:	29 2d       	mov	r18, r9
 9b4:	0d 2d       	mov	r16, r13
 9b6:	ef 2c       	mov	r14, r15
 9b8:	c1 2e       	mov	r12, r17
 9ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_vSend_char>
	_delay_ms(1);
}

void LCD_vSend_string(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE , char *data)
{
	while((*data) != '\0')
 9be:	a9 90       	ld	r10, Y+
 9c0:	aa 20       	and	r10, r10
 9c2:	a1 f7       	brne	.-24     	; 0x9ac <LCD_vSend_string+0x34>
	{
		LCD_vSend_char(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , *data);
		data++;
	}
}
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	bf 90       	pop	r11
 9d6:	af 90       	pop	r10
 9d8:	9f 90       	pop	r9
 9da:	8f 90       	pop	r8
 9dc:	7f 90       	pop	r7
 9de:	6f 90       	pop	r6
 9e0:	08 95       	ret

000009e2 <LCD_clearscreen>:

void LCD_clearscreen(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE)
{
 9e2:	af 92       	push	r10
 9e4:	cf 92       	push	r12
 9e6:	ef 92       	push	r14
 9e8:	0f 93       	push	r16
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , CLR_SCREEN);
 9ea:	aa 24       	eor	r10, r10
 9ec:	a3 94       	inc	r10
 9ee:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
 9f2:	8f e1       	ldi	r24, 0x1F	; 31
 9f4:	9e e4       	ldi	r25, 0x4E	; 78
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_clearscreen+0x14>
 9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_clearscreen+0x1a>
 9fc:	00 00       	nop
	_delay_ms(10);
}
 9fe:	0f 91       	pop	r16
 a00:	ef 90       	pop	r14
 a02:	cf 90       	pop	r12
 a04:	af 90       	pop	r10
 a06:	08 95       	ret

00000a08 <LCD_returnhome>:

void LCD_returnhome(char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE)
{
 a08:	af 92       	push	r10
 a0a:	cf 92       	push	r12
 a0c:	ef 92       	push	r14
 a0e:	0f 93       	push	r16
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , RETURN_HOME);
 a10:	aa 24       	eor	r10, r10
 a12:	68 94       	set
 a14:	a1 f8       	bld	r10, 1
 a16:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
 a1a:	8f e1       	ldi	r24, 0x1F	; 31
 a1c:	9e e4       	ldi	r25, 0x4E	; 78
 a1e:	01 97       	sbiw	r24, 0x01	; 1
 a20:	f1 f7       	brne	.-4      	; 0xa1e <LCD_returnhome+0x16>
 a22:	00 c0       	rjmp	.+0      	; 0xa24 <LCD_returnhome+0x1c>
 a24:	00 00       	nop
	_delay_ms(10);
}
 a26:	0f 91       	pop	r16
 a28:	ef 90       	pop	r14
 a2a:	cf 90       	pop	r12
 a2c:	af 90       	pop	r10
 a2e:	08 95       	ret

00000a30 <LCD_init>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_init(char portname , char pinnumber , char portname_RW , char pinnumber_RW , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE)
{
 a30:	5f 92       	push	r5
 a32:	6f 92       	push	r6
 a34:	7f 92       	push	r7
 a36:	8f 92       	push	r8
 a38:	9f 92       	push	r9
 a3a:	af 92       	push	r10
 a3c:	bf 92       	push	r11
 a3e:	cf 92       	push	r12
 a40:	df 92       	push	r13
 a42:	ef 92       	push	r14
 a44:	ff 92       	push	r15
 a46:	0f 93       	push	r16
 a48:	1f 93       	push	r17
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
 a52:	98 2e       	mov	r9, r24
 a54:	76 2e       	mov	r7, r22
 a56:	64 2e       	mov	r6, r20
 a58:	52 2e       	mov	r5, r18
 a5a:	d0 2e       	mov	r13, r16
 a5c:	be 2c       	mov	r11, r14
 a5e:	1c 2d       	mov	r17, r12
 a60:	fa 2c       	mov	r15, r10
 a62:	8f e7       	ldi	r24, 0x7F	; 127
 a64:	98 e3       	ldi	r25, 0x38	; 56
 a66:	a1 e0       	ldi	r26, 0x01	; 1
 a68:	81 50       	subi	r24, 0x01	; 1
 a6a:	90 40       	sbci	r25, 0x00	; 0
 a6c:	a0 40       	sbci	r26, 0x00	; 0
 a6e:	e1 f7       	brne	.-8      	; 0xa68 <LCD_init+0x38>
 a70:	00 c0       	rjmp	.+0      	; 0xa72 <LCD_init+0x42>
 a72:	00 00       	nop
	_delay_ms(50);
	
	if(BITS_MODE == 8){
 a74:	98 e0       	ldi	r25, 0x08	; 8
 a76:	89 16       	cp	r8, r25
 a78:	41 f5       	brne	.+80     	; 0xaca <LCD_init+0x9a>
	   DIO_set_port_direction(portname , 0xff);
 a7a:	89 2d       	mov	r24, r9
 a7c:	6f ef       	ldi	r22, 0xFF	; 255
 a7e:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_set_port_direction>
	else{
	   char dir = (((1 << 4) - 1) << pinnumber);
	   DIO_set_port_direction(portname , dir);
	}
	
	DIO_vsetPINDir(portname_EN , pinnumber_EN , 1);
 a82:	8c 2d       	mov	r24, r12
 a84:	6a 2d       	mov	r22, r10
 a86:	41 e0       	ldi	r20, 0x01	; 1
 a88:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname_RW , pinnumber_RW , 1);
 a8c:	86 2d       	mov	r24, r6
 a8e:	65 2d       	mov	r22, r5
 a90:	41 e0       	ldi	r20, 0x01	; 1
 a92:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname_RS , pinnumber_RS , 1);
 a96:	80 2f       	mov	r24, r16
 a98:	6e 2d       	mov	r22, r14
 a9a:	41 e0       	ldi	r20, 0x01	; 1
 a9c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_write(portname_RW , pinnumber_RW , 0);
 aa0:	86 2d       	mov	r24, r6
 aa2:	65 2d       	mov	r22, r5
 aa4:	40 e0       	ldi	r20, 0x00	; 0
 aa6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	
	if(BITS_MODE == 8) LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , EIGHT_BITS);
 aaa:	89 2d       	mov	r24, r9
 aac:	67 2d       	mov	r22, r7
 aae:	40 2f       	mov	r20, r16
 ab0:	2e 2d       	mov	r18, r14
 ab2:	0c 2d       	mov	r16, r12
 ab4:	ea 2c       	mov	r14, r10
 ab6:	cc 24       	eor	r12, r12
 ab8:	68 94       	set
 aba:	c3 f8       	bld	r12, 3
 abc:	0f 2e       	mov	r0, r31
 abe:	f8 e3       	ldi	r31, 0x38	; 56
 ac0:	af 2e       	mov	r10, r31
 ac2:	f0 2d       	mov	r31, r0
 ac4:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
 ac8:	32 c0       	rjmp	.+100    	; 0xb2e <LCD_init+0xfe>
	
	if(BITS_MODE == 8){
	   DIO_set_port_direction(portname , 0xff);
	}	   
	else{
	   char dir = (((1 << 4) - 1) << pinnumber);
 aca:	6f e0       	ldi	r22, 0x0F	; 15
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	07 2c       	mov	r0, r7
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <LCD_init+0xa6>
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	0a 94       	dec	r0
 ad8:	e2 f7       	brpl	.-8      	; 0xad2 <LCD_init+0xa2>
	   DIO_set_port_direction(portname , dir);
 ada:	89 2d       	mov	r24, r9
 adc:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_set_port_direction>
	}
	
	DIO_vsetPINDir(portname_EN , pinnumber_EN , 1);
 ae0:	8c 2d       	mov	r24, r12
 ae2:	6a 2d       	mov	r22, r10
 ae4:	41 e0       	ldi	r20, 0x01	; 1
 ae6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname_RW , pinnumber_RW , 1);
 aea:	86 2d       	mov	r24, r6
 aec:	65 2d       	mov	r22, r5
 aee:	41 e0       	ldi	r20, 0x01	; 1
 af0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname_RS , pinnumber_RS , 1);
 af4:	80 2f       	mov	r24, r16
 af6:	6e 2d       	mov	r22, r14
 af8:	41 e0       	ldi	r20, 0x01	; 1
 afa:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_vsetPINDir>
	DIO_write(portname_RW , pinnumber_RW , 0);
 afe:	86 2d       	mov	r24, r6
 b00:	65 2d       	mov	r22, r5
 b02:	40 e0       	ldi	r20, 0x00	; 0
 b04:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
	
	if(BITS_MODE == 8) LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , EIGHT_BITS);
	else{
		LCD_returnhome(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE);
 b08:	89 2d       	mov	r24, r9
 b0a:	67 2d       	mov	r22, r7
 b0c:	40 2f       	mov	r20, r16
 b0e:	2e 2d       	mov	r18, r14
 b10:	0c 2d       	mov	r16, r12
 b12:	ea 2c       	mov	r14, r10
 b14:	c8 2c       	mov	r12, r8
 b16:	0e 94 04 05 	call	0xa08	; 0xa08 <LCD_returnhome>
		LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , FOUR_BITS);
 b1a:	89 2d       	mov	r24, r9
 b1c:	67 2d       	mov	r22, r7
 b1e:	4d 2d       	mov	r20, r13
 b20:	2b 2d       	mov	r18, r11
 b22:	0f 2e       	mov	r0, r31
 b24:	f8 e2       	ldi	r31, 0x28	; 40
 b26:	af 2e       	mov	r10, r31
 b28:	f0 2d       	mov	r31, r0
 b2a:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
	}		
	
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , CURSOR_OFF_DISPLAN_ON);
 b2e:	89 2d       	mov	r24, r9
 b30:	67 2d       	mov	r22, r7
 b32:	4d 2d       	mov	r20, r13
 b34:	2b 2d       	mov	r18, r11
 b36:	01 2f       	mov	r16, r17
 b38:	ef 2c       	mov	r14, r15
 b3a:	c8 2c       	mov	r12, r8
 b3c:	0f 2e       	mov	r0, r31
 b3e:	fc e0       	ldi	r31, 0x0C	; 12
 b40:	af 2e       	mov	r10, r31
 b42:	f0 2d       	mov	r31, r0
 b44:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
	LCD_clearscreen(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE);
 b48:	89 2d       	mov	r24, r9
 b4a:	67 2d       	mov	r22, r7
 b4c:	4d 2d       	mov	r20, r13
 b4e:	2b 2d       	mov	r18, r11
 b50:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LCD_clearscreen>
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , ENTRY_MODE);
 b54:	89 2d       	mov	r24, r9
 b56:	67 2d       	mov	r22, r7
 b58:	4d 2d       	mov	r20, r13
 b5a:	2b 2d       	mov	r18, r11
 b5c:	0f 2e       	mov	r0, r31
 b5e:	f6 e0       	ldi	r31, 0x06	; 6
 b60:	af 2e       	mov	r10, r31
 b62:	f0 2d       	mov	r31, r0
 b64:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
}
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	ff 90       	pop	r15
 b72:	ef 90       	pop	r14
 b74:	df 90       	pop	r13
 b76:	cf 90       	pop	r12
 b78:	bf 90       	pop	r11
 b7a:	af 90       	pop	r10
 b7c:	9f 90       	pop	r9
 b7e:	8f 90       	pop	r8
 b80:	7f 90       	pop	r7
 b82:	6f 90       	pop	r6
 b84:	5f 90       	pop	r5
 b86:	08 95       	ret

00000b88 <LCD_movecursor>:
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , RETURN_HOME);
	_delay_ms(10);
}

void LCD_movecursor(char row , char col , char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE)
{
 b88:	8f 92       	push	r8
 b8a:	af 92       	push	r10
 b8c:	cf 92       	push	r12
 b8e:	ef 92       	push	r14
 b90:	0f 93       	push	r16
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
 b96:	cd b7       	in	r28, 0x3d	; 61
 b98:	de b7       	in	r29, 0x3e	; 62
	char data;
	if(row > 2 || row < 1 || col > 16 || col < 1)
 b9a:	58 2f       	mov	r21, r24
 b9c:	51 50       	subi	r21, 0x01	; 1
 b9e:	52 30       	cpi	r21, 0x02	; 2
 ba0:	70 f4       	brcc	.+28     	; 0xbbe <LCD_movecursor+0x36>
 ba2:	61 31       	cpi	r22, 0x11	; 17
 ba4:	70 f4       	brcc	.+28     	; 0xbc2 <LCD_movecursor+0x3a>
 ba6:	66 23       	and	r22, r22
 ba8:	71 f0       	breq	.+28     	; 0xbc6 <LCD_movecursor+0x3e>
	{
		data = 0x80;
	}
	else if(row == 1)
 baa:	81 30       	cpi	r24, 0x01	; 1
 bac:	19 f4       	brne	.+6      	; 0xbb4 <LCD_movecursor+0x2c>
	{
		data = 0x80 + col - 1;
 bae:	96 2f       	mov	r25, r22
 bb0:	91 58       	subi	r25, 0x81	; 129
 bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <LCD_movecursor+0x40>
	}
	else if (row == 2)
 bb4:	82 30       	cpi	r24, 0x02	; 2
 bb6:	41 f4       	brne	.+16     	; 0xbc8 <LCD_movecursor+0x40>
	{
		data = 0xc0 + col - 1;
 bb8:	96 2f       	mov	r25, r22
 bba:	91 54       	subi	r25, 0x41	; 65
 bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <LCD_movecursor+0x40>
void LCD_movecursor(char row , char col , char portname , char pinnumber , char portname_RS , char pinnumber_RS , char portname_EN , char pinnumber_EN , char BITS_MODE)
{
	char data;
	if(row > 2 || row < 1 || col > 16 || col < 1)
	{
		data = 0x80;
 bbe:	90 e8       	ldi	r25, 0x80	; 128
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <LCD_movecursor+0x40>
 bc2:	90 e8       	ldi	r25, 0x80	; 128
 bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <LCD_movecursor+0x40>
 bc6:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row == 2)
	{
		data = 0xc0 + col - 1;
	}
	LCD_vSend_cmd(portname , pinnumber , portname_RS , pinnumber_RS , portname_EN , pinnumber_EN , BITS_MODE , data);
 bc8:	84 2f       	mov	r24, r20
 bca:	62 2f       	mov	r22, r18
 bcc:	40 2f       	mov	r20, r16
 bce:	2e 2d       	mov	r18, r14
 bd0:	0c 2d       	mov	r16, r12
 bd2:	ea 2c       	mov	r14, r10
 bd4:	c8 2c       	mov	r12, r8
 bd6:	a9 2e       	mov	r10, r25
 bd8:	0e 94 28 04 	call	0x850	; 0x850 <LCD_vSend_cmd>
 bdc:	df 91       	pop	r29
 bde:	cf 91       	pop	r28
 be0:	0f 91       	pop	r16
 be2:	ef 90       	pop	r14
 be4:	cf 90       	pop	r12
 be6:	af 90       	pop	r10
 be8:	8f 90       	pop	r8
 bea:	08 95       	ret

00000bec <__divmodhi4>:
 bec:	97 fb       	bst	r25, 7
 bee:	09 2e       	mov	r0, r25
 bf0:	07 26       	eor	r0, r23
 bf2:	0a d0       	rcall	.+20     	; 0xc08 <__divmodhi4_neg1>
 bf4:	77 fd       	sbrc	r23, 7
 bf6:	04 d0       	rcall	.+8      	; 0xc00 <__divmodhi4_neg2>
 bf8:	27 d0       	rcall	.+78     	; 0xc48 <__udivmodhi4>
 bfa:	06 d0       	rcall	.+12     	; 0xc08 <__divmodhi4_neg1>
 bfc:	00 20       	and	r0, r0
 bfe:	1a f4       	brpl	.+6      	; 0xc06 <__divmodhi4_exit>

00000c00 <__divmodhi4_neg2>:
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255

00000c06 <__divmodhi4_exit>:
 c06:	08 95       	ret

00000c08 <__divmodhi4_neg1>:
 c08:	f6 f7       	brtc	.-4      	; 0xc06 <__divmodhi4_exit>
 c0a:	90 95       	com	r25
 c0c:	81 95       	neg	r24
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__divmodsi4>:
 c12:	97 fb       	bst	r25, 7
 c14:	09 2e       	mov	r0, r25
 c16:	05 26       	eor	r0, r21
 c18:	0e d0       	rcall	.+28     	; 0xc36 <__divmodsi4_neg1>
 c1a:	57 fd       	sbrc	r21, 7
 c1c:	04 d0       	rcall	.+8      	; 0xc26 <__divmodsi4_neg2>
 c1e:	28 d0       	rcall	.+80     	; 0xc70 <__udivmodsi4>
 c20:	0a d0       	rcall	.+20     	; 0xc36 <__divmodsi4_neg1>
 c22:	00 1c       	adc	r0, r0
 c24:	38 f4       	brcc	.+14     	; 0xc34 <__divmodsi4_exit>

00000c26 <__divmodsi4_neg2>:
 c26:	50 95       	com	r21
 c28:	40 95       	com	r20
 c2a:	30 95       	com	r19
 c2c:	21 95       	neg	r18
 c2e:	3f 4f       	sbci	r19, 0xFF	; 255
 c30:	4f 4f       	sbci	r20, 0xFF	; 255
 c32:	5f 4f       	sbci	r21, 0xFF	; 255

00000c34 <__divmodsi4_exit>:
 c34:	08 95       	ret

00000c36 <__divmodsi4_neg1>:
 c36:	f6 f7       	brtc	.-4      	; 0xc34 <__divmodsi4_exit>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	08 95       	ret

00000c48 <__udivmodhi4>:
 c48:	aa 1b       	sub	r26, r26
 c4a:	bb 1b       	sub	r27, r27
 c4c:	51 e1       	ldi	r21, 0x11	; 17
 c4e:	07 c0       	rjmp	.+14     	; 0xc5e <__udivmodhi4_ep>

00000c50 <__udivmodhi4_loop>:
 c50:	aa 1f       	adc	r26, r26
 c52:	bb 1f       	adc	r27, r27
 c54:	a6 17       	cp	r26, r22
 c56:	b7 07       	cpc	r27, r23
 c58:	10 f0       	brcs	.+4      	; 0xc5e <__udivmodhi4_ep>
 c5a:	a6 1b       	sub	r26, r22
 c5c:	b7 0b       	sbc	r27, r23

00000c5e <__udivmodhi4_ep>:
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	5a 95       	dec	r21
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__udivmodhi4_loop>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	bc 01       	movw	r22, r24
 c6c:	cd 01       	movw	r24, r26
 c6e:	08 95       	ret

00000c70 <__udivmodsi4>:
 c70:	a1 e2       	ldi	r26, 0x21	; 33
 c72:	1a 2e       	mov	r1, r26
 c74:	aa 1b       	sub	r26, r26
 c76:	bb 1b       	sub	r27, r27
 c78:	fd 01       	movw	r30, r26
 c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__udivmodsi4_ep>

00000c7c <__udivmodsi4_loop>:
 c7c:	aa 1f       	adc	r26, r26
 c7e:	bb 1f       	adc	r27, r27
 c80:	ee 1f       	adc	r30, r30
 c82:	ff 1f       	adc	r31, r31
 c84:	a2 17       	cp	r26, r18
 c86:	b3 07       	cpc	r27, r19
 c88:	e4 07       	cpc	r30, r20
 c8a:	f5 07       	cpc	r31, r21
 c8c:	20 f0       	brcs	.+8      	; 0xc96 <__udivmodsi4_ep>
 c8e:	a2 1b       	sub	r26, r18
 c90:	b3 0b       	sbc	r27, r19
 c92:	e4 0b       	sbc	r30, r20
 c94:	f5 0b       	sbc	r31, r21

00000c96 <__udivmodsi4_ep>:
 c96:	66 1f       	adc	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	99 1f       	adc	r25, r25
 c9e:	1a 94       	dec	r1
 ca0:	69 f7       	brne	.-38     	; 0xc7c <__udivmodsi4_loop>
 ca2:	60 95       	com	r22
 ca4:	70 95       	com	r23
 ca6:	80 95       	com	r24
 ca8:	90 95       	com	r25
 caa:	9b 01       	movw	r18, r22
 cac:	ac 01       	movw	r20, r24
 cae:	bd 01       	movw	r22, r26
 cb0:	cf 01       	movw	r24, r30
 cb2:	08 95       	ret

00000cb4 <_exit>:
 cb4:	f8 94       	cli

00000cb6 <__stop_program>:
 cb6:	ff cf       	rjmp	.-2      	; 0xcb6 <__stop_program>
